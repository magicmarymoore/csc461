from array import Array

struct History:
    var moves: Array[Int] # the column of the move
    var piecesPlayed: Array[Int] # the player who made the move
    var index: Int # Index tells you how many moves are in the structure. It is exclusive, so if index is 3, then there are 3 moves in the structure, and the moves are at index 0, 1, and 2
    #var iterIndex: Int

    def __init__(inout self, possibleMoves: Int):
        self.moves = Array[Int](possibleMoves, -1)
        self.piecesPlayed = Array[Int](possibleMoves, -1)
        self.index = 0 

    fn __copyinit__(inout self, other: History):
        self.moves = Array[Int](other.moves.size, -1)
        self.moves = other.moves
        self.piecesPlayed = other.piecesPlayed
        """for move in range(other.moves.size):
            self.moves[move] = other.moves[move]

        self.piecesPlayed = Array[Int](other.piecesPlayed.size, -1)
        for piece in range(other.piecesPlayed.size):
            self.piecesPlayed[piece] = 0 if piece % 2 == 0 else 1  #other.piecesPlayed[piece]"""

        self.index = other.index

    def addMove(inout self, move: Int, playedPiece: Int):
        self.moves[self.index] = move
        self.piecesPlayed[self.index] = playedPiece
        self.index += 1

    def getLenOfMoves(inout self) -> Int:
        return self.index

    def showMoves(inout self, player1: String, player2: String):
        print("Moves played:")

        for play in range(self.getLenOfMoves()):
            move  = self.moves[play]
            piecePlayed = self.piecesPlayed[play]

            player = player1 if piecePlayed == 0 else player2

            print(player + " played in column " + move.__str__())



    

        
    